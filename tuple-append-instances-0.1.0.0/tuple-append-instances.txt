-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Extra instances for the typeclasses in the tuple-append package
--   
--   A package that defines typeclass instances for the typeclasses defined
--   in the tuple-append package. It defines instances for data types
--   defined in the bytestring, dlist, text and vector package.
@package tuple-append-instances
@version 0.1.0.0


-- | A module that contains typeclasses instances for the
--   <a>ByteString</a>, and lazy <a>ByteString</a> data types.
module Data.Tuple.Append.Instances.ByteString.Safe
instance Data.Tuple.Append.Class.TupleAddL GHC.Word.Word8 Data.ByteString.Internal.ByteString Data.ByteString.Internal.ByteString
instance Data.Tuple.Append.Class.TupleAddR Data.ByteString.Internal.ByteString GHC.Word.Word8 Data.ByteString.Internal.ByteString
instance Data.Tuple.Append.Class.TupleAppend Data.ByteString.Internal.ByteString Data.ByteString.Internal.ByteString Data.ByteString.Internal.ByteString
instance Data.Tuple.Append.Class.TupleAddL GHC.Word.Word8 Data.ByteString.Lazy.Internal.ByteString Data.ByteString.Lazy.Internal.ByteString
instance Data.Tuple.Append.Class.TupleAddR Data.ByteString.Lazy.Internal.ByteString GHC.Word.Word8 Data.ByteString.Lazy.Internal.ByteString
instance Data.Tuple.Append.Class.TupleAppend Data.ByteString.Lazy.Internal.ByteString Data.ByteString.Lazy.Internal.ByteString Data.ByteString.Lazy.Internal.ByteString


-- | A module that contains typeclasses instances for the
--   <a>ByteString</a>, lazy <a>ByteString</a>, and <a>ShortByteString</a>
--   data types.
module Data.Tuple.Append.Instances.ByteString
instance Data.Tuple.Append.Class.TupleAddL GHC.Word.Word8 Data.ByteString.Short.Internal.ShortByteString Data.ByteString.Short.Internal.ShortByteString
instance Data.Tuple.Append.Class.TupleAddR Data.ByteString.Short.Internal.ShortByteString GHC.Word.Word8 Data.ByteString.Short.Internal.ShortByteString
instance Data.Tuple.Append.Class.TupleAppend Data.ByteString.Short.Internal.ShortByteString Data.ByteString.Short.Internal.ShortByteString Data.ByteString.Short.Internal.ShortByteString


-- | A module that contains typeclasses instances for the <a>DList</a>, and
--   <a>DNonEmpty</a> data types.
module Data.Tuple.Append.Instances.DList.Safe
instance Data.Tuple.Append.Class.TupleAddL a (Data.DList.Internal.DList a) (Data.DList.Internal.DList a)
instance Data.Tuple.Append.Class.TupleAddR (Data.DList.Internal.DList a) a (Data.DList.Internal.DList a)
instance Data.Tuple.Append.Class.TupleAppend (Data.DList.Internal.DList a) (Data.DList.Internal.DList a) (Data.DList.Internal.DList a)
instance Data.Tuple.Append.Class.TupleAddL a (Data.DList.DNonEmpty.Internal.DNonEmpty a) (Data.DList.DNonEmpty.Internal.DNonEmpty a)
instance Data.Tuple.Append.Class.TupleAddR (Data.DList.DNonEmpty.Internal.DNonEmpty a) a (Data.DList.DNonEmpty.Internal.DNonEmpty a)
instance Data.Tuple.Append.Class.TupleAppend (Data.DList.DNonEmpty.Internal.DNonEmpty a) (Data.DList.DNonEmpty.Internal.DNonEmpty a) (Data.DList.DNonEmpty.Internal.DNonEmpty a)


-- | A module that contains typeclasses instances for the <a>DList</a>, and
--   <a>DNonEmpty</a> data types.
module Data.Tuple.Append.Instances.DList


-- | A module that contains typeclasses instances for the <a>Text</a> and
--   lazy <a>Text</a> data types.
module Data.Tuple.Append.Instances.Text.Safe
instance Data.Tuple.Append.Class.TupleAddL GHC.Types.Char Data.Text.Internal.Text Data.Text.Internal.Text
instance Data.Tuple.Append.Class.TupleAddR Data.Text.Internal.Text GHC.Types.Char Data.Text.Internal.Text
instance Data.Tuple.Append.Class.TupleAppend Data.Text.Internal.Text Data.Text.Internal.Text Data.Text.Internal.Text
instance Data.Tuple.Append.Class.TupleAddL GHC.Types.Char Data.Text.Internal.Lazy.Text Data.Text.Internal.Lazy.Text
instance Data.Tuple.Append.Class.TupleAddR Data.Text.Internal.Lazy.Text GHC.Types.Char Data.Text.Internal.Lazy.Text
instance Data.Tuple.Append.Class.TupleAppend Data.Text.Internal.Lazy.Text Data.Text.Internal.Lazy.Text Data.Text.Internal.Lazy.Text


-- | A module that contains typeclasses instances for the <a>Text</a>, lazy
--   <a>Text</a>, and <a>Stream</a> data types.
module Data.Tuple.Append.Instances.Text
instance Data.Tuple.Append.Class.TupleAddL GHC.Types.Char (Data.Text.Internal.Fusion.Types.Stream GHC.Types.Char) (Data.Text.Internal.Fusion.Types.Stream GHC.Types.Char)
instance Data.Tuple.Append.Class.TupleAddR (Data.Text.Internal.Fusion.Types.Stream GHC.Types.Char) GHC.Types.Char (Data.Text.Internal.Fusion.Types.Stream GHC.Types.Char)
instance Data.Tuple.Append.Class.TupleAppend (Data.Text.Internal.Fusion.Types.Stream GHC.Types.Char) (Data.Text.Internal.Fusion.Types.Stream GHC.Types.Char) (Data.Text.Internal.Fusion.Types.Stream GHC.Types.Char)


-- | A module that contains safe typeclasses instances for the
--   <tt>bytestring</tt>, <tt>dlist</tt> and <tt>text</tt> packages.
module Data.Tuple.Append.Instances.Safe


-- | A module that contains typeclasses instances for the <a>Vector</a>,
--   <a>Vector</a>, <a>Vector</a>, <a>Vector</a>, <a>Bundle</a>,
--   <a>Bundle</a>, and <a>Stream</a> data types.
module Data.Tuple.Append.Instances.Vector
instance Data.Tuple.Append.Class.TupleAddL a (Data.Vector.Vector a) (Data.Vector.Vector a)
instance Data.Tuple.Append.Class.TupleAddR (Data.Vector.Vector a) a (Data.Vector.Vector a)
instance Data.Tuple.Append.Class.TupleAppend (Data.Vector.Vector a) (Data.Vector.Vector a) (Data.Vector.Vector a)
instance Data.Tuple.Append.Class.TupleAddL a (Data.Vector.Fusion.Bundle.Bundle v a) (Data.Vector.Fusion.Bundle.Bundle v a)
instance Data.Tuple.Append.Class.TupleAddR (Data.Vector.Fusion.Bundle.Bundle v a) a (Data.Vector.Fusion.Bundle.Bundle v a)
instance Data.Tuple.Append.Class.TupleAppend (Data.Vector.Fusion.Bundle.Bundle v a) (Data.Vector.Fusion.Bundle.Bundle v a) (Data.Vector.Fusion.Bundle.Bundle v a)
instance GHC.Base.Monad m => Data.Tuple.Append.Class.TupleAddL a (Data.Vector.Fusion.Bundle.Monadic.Bundle m v a) (Data.Vector.Fusion.Bundle.Monadic.Bundle m v a)
instance GHC.Base.Monad m => Data.Tuple.Append.Class.TupleAddR (Data.Vector.Fusion.Bundle.Monadic.Bundle m v a) a (Data.Vector.Fusion.Bundle.Monadic.Bundle m v a)
instance GHC.Base.Monad m => Data.Tuple.Append.Class.TupleAppend (Data.Vector.Fusion.Bundle.Monadic.Bundle m v a) (Data.Vector.Fusion.Bundle.Monadic.Bundle m v a) (Data.Vector.Fusion.Bundle.Monadic.Bundle m v a)
instance GHC.Base.Monad m => Data.Tuple.Append.Class.TupleAddL a (Data.Vector.Fusion.Stream.Monadic.Stream m a) (Data.Vector.Fusion.Stream.Monadic.Stream m a)
instance GHC.Base.Monad m => Data.Tuple.Append.Class.TupleAddR (Data.Vector.Fusion.Stream.Monadic.Stream m a) a (Data.Vector.Fusion.Stream.Monadic.Stream m a)
instance GHC.Base.Monad m => Data.Tuple.Append.Class.TupleAppend (Data.Vector.Fusion.Stream.Monadic.Stream m a) (Data.Vector.Fusion.Stream.Monadic.Stream m a) (Data.Vector.Fusion.Stream.Monadic.Stream m a)
instance Data.Primitive.Types.Prim a => Data.Tuple.Append.Class.TupleAddL a (Data.Vector.Primitive.Vector a) (Data.Vector.Primitive.Vector a)
instance Data.Primitive.Types.Prim a => Data.Tuple.Append.Class.TupleAddR (Data.Vector.Primitive.Vector a) a (Data.Vector.Primitive.Vector a)
instance Data.Primitive.Types.Prim a => Data.Tuple.Append.Class.TupleAppend (Data.Vector.Primitive.Vector a) (Data.Vector.Primitive.Vector a) (Data.Vector.Primitive.Vector a)
instance Foreign.Storable.Storable a => Data.Tuple.Append.Class.TupleAddL a (Data.Vector.Storable.Vector a) (Data.Vector.Storable.Vector a)
instance Foreign.Storable.Storable a => Data.Tuple.Append.Class.TupleAddR (Data.Vector.Storable.Vector a) a (Data.Vector.Storable.Vector a)
instance Foreign.Storable.Storable a => Data.Tuple.Append.Class.TupleAppend (Data.Vector.Storable.Vector a) (Data.Vector.Storable.Vector a) (Data.Vector.Storable.Vector a)
instance Data.Vector.Unboxed.Base.Unbox a => Data.Tuple.Append.Class.TupleAddL a (Data.Vector.Unboxed.Base.Vector a) (Data.Vector.Unboxed.Base.Vector a)
instance Data.Vector.Unboxed.Base.Unbox a => Data.Tuple.Append.Class.TupleAddR (Data.Vector.Unboxed.Base.Vector a) a (Data.Vector.Unboxed.Base.Vector a)
instance Data.Vector.Unboxed.Base.Unbox a => Data.Tuple.Append.Class.TupleAppend (Data.Vector.Unboxed.Base.Vector a) (Data.Vector.Unboxed.Base.Vector a) (Data.Vector.Unboxed.Base.Vector a)


-- | A module that contains typeclasses instances for the
--   <tt>bytestring</tt>, <tt>dlist</tt>, <tt>text</tt> and <tt>vector</tt>
--   packages.
module Data.Tuple.Append.Instances
